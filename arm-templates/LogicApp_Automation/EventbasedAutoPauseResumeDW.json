{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "LogicAppName": {
      "type": "string",
      "metadata": "Name of Azure Logic app",
      "defaultValue": "EventbasedAutoPauseResumeDW"
    },
    "DeploymentLocation": {
      "type": "string",
      "metadata": "Azure region for Logic app deployment",
      "defaultValue": "westus2",
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ]
    },
    "SQL DW ResourceGroup": {
      "type": "string",
      "metadata": "The name of the resource group containing the existing SQL Data Warehouse."
    },
    "SQL DW ServerName": {
      "type": "string",
      "metadata": "The logical server name of the pre-existing SQL Data Warehouse. Do not include 'database.windows.net'"
    },
    "SQL DW Name": {
      "type": "string",
      "metadata": "The name of the pre-existing SQL Data Warehouse instance."
    }
  },
  "variables": {
    "subscriptionId": "[subscription().subscriptionId]",
    "deploymentResourceGroup": "[resourceGroup().name]",
    "dwResourceId": "[concat('/subscriptions/',variables('subscriptionId'),'/resourceGroups/',parameters('SQL DW ResourceGroup'),'/providers/Microsoft.Sql/servers/',parameters('SQL DW ServerName'),'/databases/',parameters('SQL DW Name'))]",
    "pauseAlertName": "[concat('dwPauseAlert_',parameters('LogicAppName'))]",
    "resumeAlertName": "[concat('dwResumeAlert_',parameters('LogicAppName'))]",
    "defaultAlertSeverity": 2,
    "actionGroupName": "[concat(parameters('LogicAppName'),'NotificationGroup')]",
    "actionGroupId": "[concat('/subscriptions/',variables('subscriptionId'),'/resourceGroups/',variables('deploymentResourceGroup'),'/providers/Microsoft.Insights/actionGroups/',variables('actionGroupName'))]",
    "logicAppId": "[concat('/subscriptions/',variables('subscriptionId'),'/resourceGroups/',parameters('SQL DW ResourceGroup'),'/providers/Microsoft.Logic/workflows/',parameters('LogicAppName'))]"
  },
  "resources": [
    {
      "name": "[parameters('LogicAppName')]",
      "apiVersion": "2018-07-01-preview",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('DeploymentLocation')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Get_Warehouse_state": {
              "inputs": {
                "authentication": {
                  "type": "ManagedServiceIdentity"
                },
                "method": "GET",
                "uri": "https://management.azure.com/subscriptions/@{variables('RestAPIVariables')['SubscriptionId']}/resourceGroups/@{variables('RestAPIVariables')['ResourceGroupName']}/providers/Microsoft.Sql/servers/@{variables('RestAPIVariables')['ServerName']}/databases/@{variables('RestAPIVariables')['DatabaseName']}?api-version=2017-10-01-preview"
              },
              "runAfter": {
                "Initialize_API_variables": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "Get_latest_alert_value": {
              "inputs": {
                "variables": [
                  {
                    "name": "LatestAlert",
                    "type": "Object",
                    "value": "@last(triggerBody()?['data']?['context']?['condition']?['allOf'])"
                  }
                ]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "Initialize_API_variables": {
              "inputs": {
                "variables": [
                  {
                    "name": "RestAPIVariables",
                    "type": "Object",
                    "value": {
                      "DatabaseName": "[parameters('SQL DW Name')]",
                      "ResourceGroupName": "[parameters('SQL DW ResourceGroup')]",
                      "ServerName": "[parameters('SQL DW ServerName')]",
                      "SubscriptionId": "[subscription().subscriptionId]",
                      "TenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              },
              "runAfter": {
                "Get_latest_alert_value": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "PauseDataWarehouseIfApplicable": {
              "actions": {
                "PauseDataWarehouse": {
                  "inputs": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "PUT",
                    "uri": "https://management.azure.com/subscriptions/@{variables('RestAPIVariables')['SubscriptionId']}/resourceGroups/@{variables('RestAPIVariables')['ResourceGroupName']}/providers/Microsoft.Sql/servers/@{variables('RestAPIVariables')['ServerName']}/databases/@{variables('RestAPIVariables')['DatabaseName']}/pause?api-version=2017-10-01-preview"
                  },
                  "runAfter": {},
                  "type": "Http"
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('LatestAlert')['metricName']",
                      "dwu_consumption_percent"
                    ]
                  },
                  {
                    "equals": [
                      "@variables('LatestAlert')['operator']",
                      "Equals"
                    ]
                  },
                  {
                    "equals": [
                      "@variables('LatestAlert')['threshold']",
                      "0.1"
                    ]
                  },
                  {
                    "equals": [
                      "@body('Get_Warehouse_state')['properties']['status']",
                      "Online"
                    ]
                  }
                ]
              },
              "runAfter": {
                "Get_Warehouse_state": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "ResumeDataWarehouseIfApplicable": {
              "actions": {
                "ResumeDataWarehouse": {
                  "inputs": {
                    "authentication": {
                      "type": "ManagedServiceIdentity"
                    },
                    "method": "POST",
                    "uri": "https://management.azure.com/subscriptions/@{variables('RestAPIVariables')['SubscriptionId']}/resourceGroups/@{variables('RestAPIVariables')['ResourceGroupName']}/providers/Microsoft.Sql/servers/@{variables('RestAPIVariables')['ServerName']}/databases/@{variables('RestAPIVariables')['DatabaseName']}/resume?api-version=2017-10-01-preview"
                  },
                  "runAfter": {},
                  "type": "Http"
                }
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@variables('LatestAlert')['metricName']",
                      "connection_failed"
                    ]
                  },
                  {
                    "equals": [
                      "@variables('LatestAlert')['operator']",
                      "GreaterThan"
                    ]
                  },
                  {
                    "equals": [
                      "@variables('LatestAlert')['threshold']",
                      "0"
                    ]
                  },
                  {
                    "greater": [
                      "@variables('LatestAlert')['metricValue']",
                      0
                    ]
                  },
                  {
                    "equals": [
                      "@body('Get_Warehouse_state')['properties']['status']",
                      "Paused"
                    ]
                  }
                ]
              },
              "runAfter": {
                "Get_Warehouse_state": [
                  "Succeeded"
                ]
              },
              "type": "If"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {},
          "triggers": {
            "manual": {
              "inputs": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "alertContext": {
                          "properties": {
                            "condition": {
                              "properties": {
                                "allOf": {
                                  "items": {
                                    "properties": {
                                      "dimensions": {
                                        "items": {
                                          "properties": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "name",
                                            "value"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "metricName": {
                                        "type": "string"
                                      },
                                      "metricNamespace": {
                                        "type": "string"
                                      },
                                      "metricValue": {
                                        "type": "number"
                                      },
                                      "operator": {
                                        "type": "string"
                                      },
                                      "threshold": {
                                        "type": "string"
                                      },
                                      "timeAggregation": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "metricName",
                                      "metricNamespace",
                                      "operator",
                                      "threshold",
                                      "timeAggregation",
                                      "dimensions",
                                      "metricValue"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "windowSize": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "conditionType": {
                              "type": "string"
                            },
                            "properties": {}
                          },
                          "type": "object"
                        },
                        "essentials": {
                          "properties": {
                            "alertContextVersion": {
                              "type": "string"
                            },
                            "alertId": {
                              "type": "string"
                            },
                            "alertRule": {
                              "type": "string"
                            },
                            "alertTargetIDs": {
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "description": {
                              "type": "string"
                            },
                            "essentialsVersion": {
                              "type": "string"
                            },
                            "firedDateTime": {
                              "type": "string"
                            },
                            "monitorCondition": {
                              "type": "string"
                            },
                            "monitoringService": {
                              "type": "string"
                            },
                            "originAlertId": {
                              "type": "string"
                            },
                            "resolvedDateTime": {
                              "type": "string"
                            },
                            "severity": {
                              "type": "string"
                            },
                            "signalType": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "schemaId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {},
        "integrationAccount": null
      }
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2018-03-01",
      "name": "[variables('actionGroupName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows',parameters('LogicAppName'))]"
      ],
      "location": "Global",
      "properties": {
        "groupShortName": "dwautopause",
        "enabled": true,
        "logicAppReceivers": [
          {
            "name": "[parameters('LogicAppName')]",
            "resourceId": "[variables('logicAppId')]",
            "callbackUrl": "[listCallbackUrl(concat(resourceId('Microsoft.Logic/workflows', parameters('LogicAppName')), '/triggers/manual'), '2018-07-01-preview').value]"
          }
        ]
      }
    },
    {
      "name": "[variables('pauseAlertName')]",
      "type": "Microsoft.Insights/metricAlerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "tags": {},
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows',parameters('LogicAppName'))]",
        "[resourceId('Microsoft.Insights/actionGroups',variables('actionGroupName'))]"
      ],
      "properties": {
        "description": "Triggers an alert when a SQL Data Warehouse has been idle for a while and can be paused.",
        "severity": "[variables('defaultAlertSeverity')]",
        "enabled": true,
        "scopes": [
          "[variables('dwResourceId')]"
        ],
        "evaluationFrequency": "PT30M",
        "windowSize": "PT1H",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "Idle DW",
              "metricName": "dwu_consumption_percent",
              "dimensions": [],
              "operator": "LessThanOrEqual",
              "threshold": "0.1",
              "timeAggregation": "Average"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[variables('actionGroupId')]"
          }
        ]
      }
    },
    {
      "name": "[variables('resumeAlertName')]",
      "type": "Microsoft.Insights/metricAlerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "tags": {},
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows',parameters('LogicAppName'))]",
        "[resourceId('Microsoft.Insights/actionGroups',variables('actionGroupName'))]"
      ],
      "properties": {
        "description": "Triggers an alert when a failed connection has been made to a DW that has been paused",
        "severity": "[variables('defaultAlertSeverity')]",
        "enabled": true,
        "scopes": [
          "[variables('dwResourceId')]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT5M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "Failed login on paused DW",
              "metricName": "connection_failed",
              "dimensions": [],
              "operator": "GreaterThan",
              "threshold": "0",
              "timeAggregation": "Count"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[variables('actionGroupId')]"
          }
        ]
      }
    }
  ],
  "outputs": {}
}