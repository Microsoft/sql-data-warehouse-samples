{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "LogicAppName": {
      "type": "string",
      "metadata": "Name of Azure Logic app",
      "minLength": 1,
      "defaultValue": "ScheduledAutoPauseResumeDWFleet"
    },
    "DeploymentLocation": {
      "type": "string",
      "metadata": "Azure region for deployment",
      "minLength": 1,
      "defaultValue": "westus2",
      "allowedValues": [
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ]
    },
    "TIME_ZONE": {
      "type": "string",
      "metadata": "Timezone for the schedule. Consult https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx for more information",
      "defaultValue": "Pacific Standard Time",
      "allowedValues": [
        "Dateline Standard Time",
        "Samoa Standard Time",
        "Hawaiian Standard Time",
        "Alaskan Standard Time",
        "Pacific Standard Time",
        "Mountain Standard Time",
        "Mexico Standard Time 2",
        "U.S. Mountain Standard Time",
        "Central Standard Time",
        "Canada Central Standard Time",
        "Mexico Standard Time",
        "Central America Standard Time",
        "Eastern Standard Time",
        "U.S. Eastern Standard Time",
        "S.A. Pacific Standard Time",
        "Atlantic Standard Time",
        "S.A. Western Standard Time",
        "Pacific S.A. Standard Time",
        "Newfoundland and Labrador Standard Time",
        "E. South America Standard Time",
        "S.A. Eastern Standard Time",
        "Greenland Standard Time",
        "Mid-Atlantic Standard Time",
        "Azores Standard Time",
        "Cape Verde Standard Time",
        "GMT Standard Time",
        "Greenwich Standard Time",
        "Central Europe Standard Time",
        "Central European Standard Time",
        "Romance Standard Time",
        "W. Europe Standard Time",
        "W. Central Africa Standard Time",
        "E. Europe Standard Time",
        "Egypt Standard Time",
        "FLE Standard Time",
        "GTB Standard Time",
        "Israel Standard Time",
        "South Africa Standard Time",
        "Russian Standard Time",
        "Arab Standard Time",
        "E. Africa Standard Time",
        "Arabic Standard Time",
        "Iran Standard Time",
        "Arabian Standard Time",
        "Caucasus Standard Time",
        "Transitional Islamic State of Afghanistan Standard Time",
        "Ekaterinburg Standard Time",
        "West Asia Standard Time",
        "India Standard Time",
        "Nepal Standard Time",
        "Central Asia Standard Time",
        "Sri Lanka Standard Time",
        "N. Central Asia Standard Time",
        "Myanmar Standard Time",
        "S.E. Asia Standard Time",
        "North Asia Standard Time",
        "China Standard Time",
        "Singapore Standard Time",
        "Taipei Standard Time",
        "W. Australia Standard Time",
        "North Asia East Standard Time",
        "Korea Standard Time",
        "Tokyo Standard Time",
        "Yakutsk Standard Time",
        "A.U.S. Central Standard Time",
        "Cen. Australia Standard Time",
        "A.U.S. Eastern Standard Time",
        "E. Australia Standard Time",
        "Tasmania Standard Time",
        "Vladivostok Standard Time",
        "West Pacific Standard Time",
        "Central Pacific Standard Time",
        "Fiji Islands Standard Time",
        "New Zealand Standard Time",
        "Tonga Standard Time"
      ]
    },
    "Service Principal ApplicationID": {
      "type": "string",
      "metadata": "The ApplicationID of the service principal with access to SQL Data Warehouse instance."
    },
    "Service Principal Password": {
      "type": "string",
      "metadata": "The secret key of the service principal account."
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('LogicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('DeploymentLocation')]",
      "apiVersion": "2016-06-01",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "ForEachTaggedDatabase": {
              "actions": {
                "Get_DataWarehouse": {
                  "inputs": {
                    "headers": {
                      "Authorization": "Bearer @{body('Request_Azure_Authentication_Token')['access_token']}"
                    },
                    "method": "GET",
                    "queries": {
                      "api-version": "2017-10-01-preview"
                    },
                    "uri": "@{concat('https://management.azure.com',items('ForEachTaggedDatabase')['id'])}"
                  },
                  "runAfter": {},
                  "type": "Http"
                },
                "PauseWarehouseIfApplicable": {
                  "actions": {
                    "Pause_DataWarehouse": {
                      "inputs": {
                        "headers": {
                          "Authorization": "Bearer @{body('Request_Azure_Authentication_Token')['access_token']}"
                        },
                        "method": "POST",
                        "queries": {
                          "api-version": "2017-10-01-preview"
                        },
                        "uri": "@{concat('https://management.azure.com',items('ForEachTaggedDatabase')['id'],'/pause')}"
                      },
                      "runAfter": {
                        "Until_ZeroActiveQueries": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http"
                    },
                    "Until_ZeroActiveQueries": {
                      "actions": {
                        "GetActiveQueryCount": {
                          "inputs": {
                            "headers": {
                              "Authorization": "Bearer @{body('Request_Azure_Authentication_Token')['access_token']}"
                            },
                            "method": "GET",
                            "queries": {
                              "api-version": "2017-03-01-preview"
                            },
                            "uri": "@{concat('https://management.azure.com',items('ForEachTaggedDatabase')['id'],'/dataWarehouseUserActivities/current')}"
                          },
                          "runAfter": {},
                          "type": "Http"
                        },
                        "Wait5minsIfActiveQuery": {
                          "actions": {
                            "Wait_5mins": {
                              "inputs": {
                                "interval": {
                                  "count": 5,
                                  "unit": "Minute"
                                }
                              },
                              "runAfter": {},
                              "type": "Wait"
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "greater": [
                                  "@body('GetActiveQueryCount')['properties']?['activeQueriesCount']",
                                  0
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "GetActiveQueryCount": [
                              "Succeeded"
                            ]
                          },
                          "type": "If"
                        }
                      },
                      "expression": "@equals(coalesce(body('GetActiveQueryCount')['properties']?['activeQueriesCount'], 1), 0)",
                      "limit": {
                        "count": 200,
                        "timeout": "PT3H"
                      },
                      "runAfter": {},
                      "type": "Until"
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Get_DataWarehouse')['properties']['status']",
                          "Online"
                        ]
                      },
                      {
                        "not": {
                          "equals": [
                            "@coalesce(body('Get_DataWarehouse')['tags']?['AutoSchedulePauseTime'],'None')",
                            "None"
                          ]
                        }
                      },
                      {
                        "greaterOrEquals": [
                          "@convertFromUtc(utcNow(), coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleTimeZone'], variables('RestAPIVariables')['ScheduleTimeZone']), 't')",
                          "@addMinutes(coalesce(body('Get_DataWarehouse')['tags']?['AutoSchedulePauseTime'],'6:00 PM'),-5,'t')"
                        ]
                      },
                      {
                        "less": [
                          "@convertFromUtc(utcNow(), coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleTimeZone'], variables('RestAPIVariables')['ScheduleTimeZone']), 't')",
                          "@addMinutes(coalesce(body('Get_DataWarehouse')['tags']?['AutoSchedulePauseTime'],'6:00 PM'),11,'t')"
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Get_DataWarehouse": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "ResumeWarehouseIfApplicable": {
                  "actions": {
                    "Resume_DataWarehouse": {
                      "inputs": {
                        "method": "GET",
                        "queries": {
                          "api-version": "2017-10-01-preview"
                        },
                        "uri": "@{concat('https://management.azure.com',items('ForEachTaggedDatabase')['id'],'/resume')}"
                      },
                      "runAfter": {},
                      "type": "Http"
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Get_DataWarehouse')['properties']['status']",
                          "Paused"
                        ]
                      },
                      {
                        "not": {
                          "equals": [
                            "@coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleResumeTime'],'None')",
                            "None"
                          ]
                        }
                      },
                      {
                        "greaterOrEquals": [
                          "@convertFromUtc(utcNow(),coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleTimeZone'], variables('RestAPIVariables')['ScheduleTimeZone']),'t')",
                          "@addMinutes(coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleResumeTime'],'9:00 AM'),-5,'t')"
                        ]
                      },
                      {
                        "less": [
                          "@convertFromUtc(utcNow(),coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleTimeZone'], variables('RestAPIVariables')['ScheduleTimeZone']),'t')",
                          "@addMinutes(coalesce(body('Get_DataWarehouse')['tags']?['AutoScheduleResumeTime'],'9:00 AM'),11,'t')"
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Get_DataWarehouse": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                }
              },
              "foreach": "@body('Get_tagged_resources')['value']",
              "runAfter": {
                "Get_tagged_resources": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Get_tagged_resources": {
              "inputs": {
                "headers": {
                  "Authorization": "Bearer @{body('Request_Azure_Authentication_Token')['access_token']}"
                },
                "method": "GET",
                "uri": "https://management.azure.com/subscriptions/@{variables('RestAPIVariables')['SubscriptionId']}/resources?$filter=startsWith(tagName, 'AutoSchedule')&api-version=2018-05-01"
              },
              "runAfter": {
                "Request_Azure_Authentication_Token": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "Initialize_API_variables": {
              "inputs": {
                "variables": [
                  {
                    "name": "RestAPIVariables",
                    "type": "Object",
                    "value": {
                        "ServicePrincipalId": "[parameters('Service Principal ApplicationID')]",
                        "ClientSecret": "[parameters('Service Principal Password')]",
                        "SubscriptionId": "[subscription().subscriptionId]",
                        "TenantId": "[subscription().tenantId]",
                        "ScheduleTimeZone": "[parameters('TIME_ZONE')]"
                    }
                  }
              ]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "Request_Azure_Authentication_Token": {
              "inputs": {
                "body": "client_id=@{variables('RestAPIVariables')['ServicePrincipalId']}&client_secret=@{variables('RestAPIVariables')['ClientSecret']}&grant_type=client_credentials&resource=https://management.azure.com",
                "headers": {
                  "Content-Type": "application/x-www-form-urlencoded"
                },
                "method": "POST",
                "uri": "https://login.microsoftonline.com/@{variables('RestAPIVariables')['TenantId']}/oauth2/token"
              },
              "runAfter": {
                "Initialize_API_variables": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {},
          "triggers": {
            "Run_every_15_minutes": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 15,
                "startTime": "2019-01-01T00:00:00Z"
              },
              "type": "Recurrence"
            }
          }
        },
        "parameters": {},
        "integrationAccount": null
      }
    }
  ],
  "outputs": {}
}